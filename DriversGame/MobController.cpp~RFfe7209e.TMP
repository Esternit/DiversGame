#include "MobController.h"

MobController::MobController(float delay, float delayWave) : delay(delay), delayWave(delayWave) , currentSpawner(-1,-1) {
	timer.restart();
    timerWave.restart();
}

void MobController::spawnEnemies(std::vector<Enemy>& enemies, std::vector<Spawner>& spawners, sf::View& view) {
    if (timer.getElapsedTime().asSeconds() > delay && enemies.size() < 150) {
		timer.restart();
        if (currentSpawner.posX == -1 && currentSpawner.posY == -1) {
            std::vector<Spawner> calculatedSpawners = calculateSpawners(spawners, view);
            int index = rand() % calculatedSpawners.size();
            currentSpawner = calculatedSpawners[index];
        }

        enemies.push_back(Enemy(TextureHolder::GetTexture("Assets/Enemy/firebug.png"), currentSpawner.posX, currentSpawner.posY, FrameAnimation(0, 90, 0, 100), 65, 40, 20, 3, 2, "Firebug"));
    }
}

std::vector<Spawner>& MobController::calculateSpawners(std::vector<Spawner>& spawners, sf::View& view) {
    sf::FloatRect viewBounds(
        view.getCenter().x - view.getSize().x / 2,
        view.getCenter().y - view.getSize().y / 2,
        view.getSize().x,                         
        view.getSize().y
    );

    std::vector<Spawner> outsideViewSpawners;

    for (const auto& spawner : spawners) {
        if (!viewBounds.contains(spawner.posX, spawner.posY)) {
            outsideViewSpawners.push_back(spawner);
        }
    }

    return outsideViewSpawners;
}

bool MobController::startWave(sf::Window& window, sf::View& view) {
	if (timerWave.getElapsedTime().asSeconds() > delayWave) {
        timerWave.restart();
        Font font;
        font.loadFromFile("Assets/open-sans/OpenSans-Bold.ttf");
        sf::Text text = sf::Text("IIIINNNCCCOOOMMMIIINNNGGG", font, 50);

        Vector2f viewCenter = view.getCenter();
        Vector2f viewSize = view.getSize();
        float halfWidth = viewSize.x / 2.0f;
        float halfHeight = viewSize.y / 2.0f;

        text.setPosition(viewCenter.x - halfWidth + 100, viewCenter.y - halfHeight + 100);
		window.draw(text);
        
		return true;
	}
	return false;
}